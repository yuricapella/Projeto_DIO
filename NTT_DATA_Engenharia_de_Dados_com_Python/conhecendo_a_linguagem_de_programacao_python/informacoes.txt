Modo interativo

 O interpretador python pode executar em modo que possibilite o desenvolvedor a escrever o código e ver o resultado na hora.
 Basta ir no terminal e digitar: python
 Outra forma seria colocar no terminal: python -i nomearquivo.py
 No caso de um arquivo dentro de uma pasta igual este projeto, a execução ficaria assim:
 python -i '.\Conhecendo a linguagem de programacao python\tipos_de_dados.py'
 Por via das dúvidas é bom sempre ir apertando tab para ver se o programa completa com o nome certo.

 Utilizar exit() para sair.



 ---------------

 Dir

Utilizar no modo interativo, segue exemplo:

 >>> dir()
['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__']
>>> import math
>>> dir()       
['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'math']


se colocar dir(100) vai mostrar todos os metodos que são utilizados para formar o numero int 100

>>> dir(100)
['__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__index__', '__init__', '__init_subclass__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'as_integer_ratio', 'bit_count', 'bit_length', 'conjugate', 'denominator', 'from_bytes', 'imag', 'is_integer', 'numerator', 'real', 'to_bytes']



---------------

Help

Invoca o sistema de ajuda integrado.
É possível fazer buscas em modo interativo ou informar por parâmetro qual o nome do módulo, função, classe, método ou variável.
Exemplo:
help()
help(100)

Mostra as informações de como utilizar os metodos

Vai mostrando de pouco em pouco caso ficar apertando enter ou apertar espaço para ver mais de uma linha por vez.

Aperta Q pra sair da documentação
Aperta enter para sair do help e voltar para o modo interativo

--------------------
Boas práticas

- O padrão de nomes deve ser snake case.
- Escolher nomes sugestivos.
- Nome de constantes todo em maiúsculo.

No python não tem como definir uma variável como constante então deve-se colocar a variavel toda maiuscula pois ao menos quem for mexer no código saberá que nao deve alterar.

CAMINHO_ARQUIVO


Nomes sugestivos:

taxaJuros
ou
taxa_juros #Recomendado usar esse padrão snake case para nomear variaveis no python.

--------------------
Tipos em Python
Os tipos built-in são:

Texto
str

Númerico
int, float, complex

Sequência
list, tuple, range

Mapa
dict

Coleção
set, fronzenset

Booleano
bool

Binário
bytes, bytearray, memoryview

--------------------

Conversão de tipos

Exemplos:

valor = 10 - Automaticamente o python já entende que é tipo INT.
valor_str = str(valor) - Transforma em string.
valor_float = float(valor) - Transforma em float.

valor_dois = 10.0  - Automaticamente o  python já entende que é tipo FLOAT.
valor_int = int(valor_dois) - Transforma em INT.

Para saber que tipo é a variável basta colocar:
print(type(valor_dois))

Retornará: <class 'float'>

Outro exemplo de conversão seria a divisão:

print (100 / 2) #Divisão retorna FLOAT
print (100 // 2) #Divisão que retorna o resultado INT mais próximo


------------
Input e Output

nome = input("Informe o seu nome: ")

Assim que o programa rodar essa variável será solicitado que digite uma informação para o programa armazenar.

Com a função print, podemos verificar no programa o que foi armazenado

print(nome) #Output

Porém há outras formas de printar:

print(nome,end="... \n") #Nesse print sairá "nome..."
\n serve para caso houver outro print, ele irá ser informado normalmente abaixo deste.

Se não colocar \n o print abaixo irá ser informado junto com este print

print(nome,end="...")
print(nome)

Resultado: nome...nome

Outro exemplo é utilizar
print(nome,sep="#")

resultado: nome#

Porém se houver mais variáveis neste print:
print(nome,sobrenome,idade,sep="#")

O resultado será: nome#sobrenome#idade

Usando tudo junto:

print("Cliente: ",nome,sobrenome,idade, sep="|",end="| essas são as informações do cliente!")

resultado: Cliente: |nome|sobrenome|idade| essas são as informações do cliente!

